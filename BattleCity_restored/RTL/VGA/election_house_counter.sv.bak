

module election_house_counter	(	
					input	logic	clk,
					input	logic	resetN,
					input logic one_sec,
					input logic collisionTank1Election,
					input logic collisionTank2Election,
					
					output logic tank1Bonus,
					output logic tank2Bonus,
					output logic coolingDown
);


parameter int maxCounter = 5;
parameter int coolDown = 20;
int flag = 0;
int counterTank1 = 0;
int counterTank2 = 0;
int counterCoolDown = 0;

always_ff@(posedge clk or negedge resetN)
begin
	if(!resetN) begin
			tank1Bonus <= 0;
			tank2Bonus <= 0;
			flag <= 0;
			counterTank1 <= 0;
			counterTank2 <= 0;
			coolingDown <= 0;
			
	end
	else begin
		if (flag == 0) begin
			coolingDown	<= 0;
			if (collisionTank1Election) begin
				if (one_sec == 1'b1) begin
					if (counterTank1 == maxCounter) begin
						flag <= 1;
						tank1Bonus <= 1;
						counterTank1 <= 0;
					end
					else begin
						counterTank1++;
						tank1Bonus <= 0;
					end
				end
			end
			else begin
				counterTank1 <= 0;
			end
			if (collisionTank2Election) begin
				if (one_sec == 1'b1) begin
					if (counterTank2 == maxCounter) begin
						flag <= 1;
						tank2Bonus <= 1;
						counterTank2 <= 0;
					end
					else begin
						counterTank2++;
						tank2Bonus <= 0;
					end
				end
			end
			else begin
				counterTank2 <= 0;
			end
		end
		else begin
			coolingDown <= 1;
			tank1Bonus <= 0;
			tank2Bonus <= 0;
			if (one_sec == 1'b1) begin
				if (counterCoolDown == coolDown) begin
					flag <= 0;
					counterCoolDown <= 0;
					counterTank1 <= 0;
					counterTank2 <= 0;

				end
				else begin
					counterCoolDown++;
				end
			end
		end
	end
end

endmodule
