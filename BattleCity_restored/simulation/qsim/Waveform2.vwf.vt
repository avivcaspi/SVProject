// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/04/2020 20:11:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          game_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module game_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enterPressed;
reg one_sec;
reg resetN;
reg tank1Lose;
reg tank1Win;
reg tank2Lose;
reg tank2Win;
// wires                                               
wire [3:0] counter_ones;
wire [3:0] counter_tens;
wire hideMap;
wire pickMap;
wire randomPick;
wire runEn;
wire showEnd;

// assign statements (if any)                          
game_controller i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.counter_ones(counter_ones),
	.counter_tens(counter_tens),
	.enterPressed(enterPressed),
	.hideMap(hideMap),
	.one_sec(one_sec),
	.pickMap(pickMap),
	.randomPick(randomPick),
	.resetN(resetN),
	.runEn(runEn),
	.showEnd(showEnd),
	.tank1Lose(tank1Lose),
	.tank1Win(tank1Win),
	.tank2Lose(tank2Lose),
	.tank2Win(tank2Win)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #10000 1'b1;
end 

// one_sec
always
begin
	one_sec = 1'b0;
	one_sec = #2500 1'b1;
	#2500;
end 

// enterPressed
initial
begin
	enterPressed = 1'b0;
	enterPressed = #70000 1'b1;
	enterPressed = #10000 1'b0;
end 

// tank1Win
initial
begin
	tank1Win = 1'b0;
	tank1Win = #760000 1'b1;
	tank1Win = #10000 1'b0;
end 

// tank2Win
initial
begin
	tank2Win = 1'b0;
end 

// tank1Lose
initial
begin
	tank1Lose = 1'b0;
end 

// tank2Lose
initial
begin
	tank2Lose = 1'b0;
end 
endmodule

