// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/05/2020 11:29:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bricks_matrix
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bricks_matrix_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] brickCollision1X;
reg [3:0] brickCollision1Y;
reg changeMap;
reg clk;
reg collision;
reg [1:0] mapNum;
reg [10:0] pixelX;
reg [10:0] pixelY;
reg randomMap;
reg resetN;
reg [10:0] topLeftX;
reg [10:0] topLeftY;
// wires                                               
wire [7:0] RGBout;
wire [2:0] brickNum;
wire drawingRequest;
wire matrix_0_0;
wire matrix_0_1;
wire matrix_0_2;
wire matrix_0_3;
wire matrix_0_4;
wire matrix_0_5;
wire matrix_0_6;
wire matrix_0_7;
wire matrix_0_8;
wire matrix_0_9;
wire matrix_0_10;
wire matrix_0_11;
wire matrix_0_12;
wire matrix_0_13;
wire matrix_0_14;
wire matrix_0_15;
wire matrix_0_16;
wire matrix_1_0;
wire matrix_1_1;
wire matrix_1_2;
wire matrix_1_3;
wire matrix_1_4;
wire matrix_1_5;
wire matrix_1_6;
wire matrix_1_7;
wire matrix_1_8;
wire matrix_1_9;
wire matrix_1_10;
wire matrix_1_11;
wire matrix_1_12;
wire matrix_1_13;
wire matrix_1_14;
wire matrix_1_15;
wire matrix_1_16;
wire matrix_2_0;
wire matrix_2_1;
wire matrix_2_2;
wire matrix_2_3;
wire matrix_2_4;
wire matrix_2_5;
wire matrix_2_6;
wire matrix_2_7;
wire matrix_2_8;
wire matrix_2_9;
wire matrix_2_10;
wire matrix_2_11;
wire matrix_2_12;
wire matrix_2_13;
wire matrix_2_14;
wire matrix_2_15;
wire matrix_2_16;
wire matrix_3_0;
wire matrix_3_1;
wire matrix_3_2;
wire matrix_3_3;
wire matrix_3_4;
wire matrix_3_5;
wire matrix_3_6;
wire matrix_3_7;
wire matrix_3_8;
wire matrix_3_9;
wire matrix_3_10;
wire matrix_3_11;
wire matrix_3_12;
wire matrix_3_13;
wire matrix_3_14;
wire matrix_3_15;
wire matrix_3_16;
wire matrix_4_0;
wire matrix_4_1;
wire matrix_4_2;
wire matrix_4_3;
wire matrix_4_4;
wire matrix_4_5;
wire matrix_4_6;
wire matrix_4_7;
wire matrix_4_8;
wire matrix_4_9;
wire matrix_4_10;
wire matrix_4_11;
wire matrix_4_12;
wire matrix_4_13;
wire matrix_4_14;
wire matrix_4_15;
wire matrix_4_16;
wire matrix_5_0;
wire matrix_5_1;
wire matrix_5_2;
wire matrix_5_3;
wire matrix_5_4;
wire matrix_5_5;
wire matrix_5_6;
wire matrix_5_7;
wire matrix_5_8;
wire matrix_5_9;
wire matrix_5_10;
wire matrix_5_11;
wire matrix_5_12;
wire matrix_5_13;
wire matrix_5_14;
wire matrix_5_15;
wire matrix_5_16;
wire matrix_6_0;
wire matrix_6_1;
wire matrix_6_2;
wire matrix_6_3;
wire matrix_6_4;
wire matrix_6_5;
wire matrix_6_6;
wire matrix_6_7;
wire matrix_6_8;
wire matrix_6_9;
wire matrix_6_10;
wire matrix_6_11;
wire matrix_6_12;
wire matrix_6_13;
wire matrix_6_14;
wire matrix_6_15;
wire matrix_6_16;
wire matrix_7_0;
wire matrix_7_1;
wire matrix_7_2;
wire matrix_7_3;
wire matrix_7_4;
wire matrix_7_5;
wire matrix_7_6;
wire matrix_7_7;
wire matrix_7_8;
wire matrix_7_9;
wire matrix_7_10;
wire matrix_7_11;
wire matrix_7_12;
wire matrix_7_13;
wire matrix_7_14;
wire matrix_7_15;
wire matrix_7_16;
wire matrix_8_0;
wire matrix_8_1;
wire matrix_8_2;
wire matrix_8_3;
wire matrix_8_4;
wire matrix_8_5;
wire matrix_8_6;
wire matrix_8_7;
wire matrix_8_8;
wire matrix_8_9;
wire matrix_8_10;
wire matrix_8_11;
wire matrix_8_12;
wire matrix_8_13;
wire matrix_8_14;
wire matrix_8_15;
wire matrix_8_16;
wire matrix_9_0;
wire matrix_9_1;
wire matrix_9_2;
wire matrix_9_3;
wire matrix_9_4;
wire matrix_9_5;
wire matrix_9_6;
wire matrix_9_7;
wire matrix_9_8;
wire matrix_9_9;
wire matrix_9_10;
wire matrix_9_11;
wire matrix_9_12;
wire matrix_9_13;
wire matrix_9_14;
wire matrix_9_15;
wire matrix_9_16;
wire matrix_10_0;
wire matrix_10_1;
wire matrix_10_2;
wire matrix_10_3;
wire matrix_10_4;
wire matrix_10_5;
wire matrix_10_6;
wire matrix_10_7;
wire matrix_10_8;
wire matrix_10_9;
wire matrix_10_10;
wire matrix_10_11;
wire matrix_10_12;
wire matrix_10_13;
wire matrix_10_14;
wire matrix_10_15;
wire matrix_10_16;
wire matrix_11_0;
wire matrix_11_1;
wire matrix_11_2;
wire matrix_11_3;
wire matrix_11_4;
wire matrix_11_5;
wire matrix_11_6;
wire matrix_11_7;
wire matrix_11_8;
wire matrix_11_9;
wire matrix_11_10;
wire matrix_11_11;
wire matrix_11_12;
wire matrix_11_13;
wire matrix_11_14;
wire matrix_11_15;
wire matrix_11_16;
wire matrix_12_0;
wire matrix_12_1;
wire matrix_12_2;
wire matrix_12_3;
wire matrix_12_4;
wire matrix_12_5;
wire matrix_12_6;
wire matrix_12_7;
wire matrix_12_8;
wire matrix_12_9;
wire matrix_12_10;
wire matrix_12_11;
wire matrix_12_12;
wire matrix_12_13;
wire matrix_12_14;
wire matrix_12_15;
wire matrix_12_16;
wire matrix_13_0;
wire matrix_13_1;
wire matrix_13_2;
wire matrix_13_3;
wire matrix_13_4;
wire matrix_13_5;
wire matrix_13_6;
wire matrix_13_7;
wire matrix_13_8;
wire matrix_13_9;
wire matrix_13_10;
wire matrix_13_11;
wire matrix_13_12;
wire matrix_13_13;
wire matrix_13_14;
wire matrix_13_15;
wire matrix_13_16;
wire [10:0] offsetX;
wire [10:0] offsetY;

// assign statements (if any)                          
bricks_matrix i1 (
// port map - connection between master ports and signals/registers   
	.RGBout(RGBout),
	.brickCollision1X(brickCollision1X),
	.brickCollision1Y(brickCollision1Y),
	.brickNum(brickNum),
	.changeMap(changeMap),
	.clk(clk),
	.collision(collision),
	.drawingRequest(drawingRequest),
	.mapNum(mapNum),
	.matrix_0_0(matrix_0_0),
	.matrix_0_1(matrix_0_1),
	.matrix_0_2(matrix_0_2),
	.matrix_0_3(matrix_0_3),
	.matrix_0_4(matrix_0_4),
	.matrix_0_5(matrix_0_5),
	.matrix_0_6(matrix_0_6),
	.matrix_0_7(matrix_0_7),
	.matrix_0_8(matrix_0_8),
	.matrix_0_9(matrix_0_9),
	.matrix_0_10(matrix_0_10),
	.matrix_0_11(matrix_0_11),
	.matrix_0_12(matrix_0_12),
	.matrix_0_13(matrix_0_13),
	.matrix_0_14(matrix_0_14),
	.matrix_0_15(matrix_0_15),
	.matrix_0_16(matrix_0_16),
	.matrix_1_0(matrix_1_0),
	.matrix_1_1(matrix_1_1),
	.matrix_1_2(matrix_1_2),
	.matrix_1_3(matrix_1_3),
	.matrix_1_4(matrix_1_4),
	.matrix_1_5(matrix_1_5),
	.matrix_1_6(matrix_1_6),
	.matrix_1_7(matrix_1_7),
	.matrix_1_8(matrix_1_8),
	.matrix_1_9(matrix_1_9),
	.matrix_1_10(matrix_1_10),
	.matrix_1_11(matrix_1_11),
	.matrix_1_12(matrix_1_12),
	.matrix_1_13(matrix_1_13),
	.matrix_1_14(matrix_1_14),
	.matrix_1_15(matrix_1_15),
	.matrix_1_16(matrix_1_16),
	.matrix_2_0(matrix_2_0),
	.matrix_2_1(matrix_2_1),
	.matrix_2_2(matrix_2_2),
	.matrix_2_3(matrix_2_3),
	.matrix_2_4(matrix_2_4),
	.matrix_2_5(matrix_2_5),
	.matrix_2_6(matrix_2_6),
	.matrix_2_7(matrix_2_7),
	.matrix_2_8(matrix_2_8),
	.matrix_2_9(matrix_2_9),
	.matrix_2_10(matrix_2_10),
	.matrix_2_11(matrix_2_11),
	.matrix_2_12(matrix_2_12),
	.matrix_2_13(matrix_2_13),
	.matrix_2_14(matrix_2_14),
	.matrix_2_15(matrix_2_15),
	.matrix_2_16(matrix_2_16),
	.matrix_3_0(matrix_3_0),
	.matrix_3_1(matrix_3_1),
	.matrix_3_2(matrix_3_2),
	.matrix_3_3(matrix_3_3),
	.matrix_3_4(matrix_3_4),
	.matrix_3_5(matrix_3_5),
	.matrix_3_6(matrix_3_6),
	.matrix_3_7(matrix_3_7),
	.matrix_3_8(matrix_3_8),
	.matrix_3_9(matrix_3_9),
	.matrix_3_10(matrix_3_10),
	.matrix_3_11(matrix_3_11),
	.matrix_3_12(matrix_3_12),
	.matrix_3_13(matrix_3_13),
	.matrix_3_14(matrix_3_14),
	.matrix_3_15(matrix_3_15),
	.matrix_3_16(matrix_3_16),
	.matrix_4_0(matrix_4_0),
	.matrix_4_1(matrix_4_1),
	.matrix_4_2(matrix_4_2),
	.matrix_4_3(matrix_4_3),
	.matrix_4_4(matrix_4_4),
	.matrix_4_5(matrix_4_5),
	.matrix_4_6(matrix_4_6),
	.matrix_4_7(matrix_4_7),
	.matrix_4_8(matrix_4_8),
	.matrix_4_9(matrix_4_9),
	.matrix_4_10(matrix_4_10),
	.matrix_4_11(matrix_4_11),
	.matrix_4_12(matrix_4_12),
	.matrix_4_13(matrix_4_13),
	.matrix_4_14(matrix_4_14),
	.matrix_4_15(matrix_4_15),
	.matrix_4_16(matrix_4_16),
	.matrix_5_0(matrix_5_0),
	.matrix_5_1(matrix_5_1),
	.matrix_5_2(matrix_5_2),
	.matrix_5_3(matrix_5_3),
	.matrix_5_4(matrix_5_4),
	.matrix_5_5(matrix_5_5),
	.matrix_5_6(matrix_5_6),
	.matrix_5_7(matrix_5_7),
	.matrix_5_8(matrix_5_8),
	.matrix_5_9(matrix_5_9),
	.matrix_5_10(matrix_5_10),
	.matrix_5_11(matrix_5_11),
	.matrix_5_12(matrix_5_12),
	.matrix_5_13(matrix_5_13),
	.matrix_5_14(matrix_5_14),
	.matrix_5_15(matrix_5_15),
	.matrix_5_16(matrix_5_16),
	.matrix_6_0(matrix_6_0),
	.matrix_6_1(matrix_6_1),
	.matrix_6_2(matrix_6_2),
	.matrix_6_3(matrix_6_3),
	.matrix_6_4(matrix_6_4),
	.matrix_6_5(matrix_6_5),
	.matrix_6_6(matrix_6_6),
	.matrix_6_7(matrix_6_7),
	.matrix_6_8(matrix_6_8),
	.matrix_6_9(matrix_6_9),
	.matrix_6_10(matrix_6_10),
	.matrix_6_11(matrix_6_11),
	.matrix_6_12(matrix_6_12),
	.matrix_6_13(matrix_6_13),
	.matrix_6_14(matrix_6_14),
	.matrix_6_15(matrix_6_15),
	.matrix_6_16(matrix_6_16),
	.matrix_7_0(matrix_7_0),
	.matrix_7_1(matrix_7_1),
	.matrix_7_2(matrix_7_2),
	.matrix_7_3(matrix_7_3),
	.matrix_7_4(matrix_7_4),
	.matrix_7_5(matrix_7_5),
	.matrix_7_6(matrix_7_6),
	.matrix_7_7(matrix_7_7),
	.matrix_7_8(matrix_7_8),
	.matrix_7_9(matrix_7_9),
	.matrix_7_10(matrix_7_10),
	.matrix_7_11(matrix_7_11),
	.matrix_7_12(matrix_7_12),
	.matrix_7_13(matrix_7_13),
	.matrix_7_14(matrix_7_14),
	.matrix_7_15(matrix_7_15),
	.matrix_7_16(matrix_7_16),
	.matrix_8_0(matrix_8_0),
	.matrix_8_1(matrix_8_1),
	.matrix_8_2(matrix_8_2),
	.matrix_8_3(matrix_8_3),
	.matrix_8_4(matrix_8_4),
	.matrix_8_5(matrix_8_5),
	.matrix_8_6(matrix_8_6),
	.matrix_8_7(matrix_8_7),
	.matrix_8_8(matrix_8_8),
	.matrix_8_9(matrix_8_9),
	.matrix_8_10(matrix_8_10),
	.matrix_8_11(matrix_8_11),
	.matrix_8_12(matrix_8_12),
	.matrix_8_13(matrix_8_13),
	.matrix_8_14(matrix_8_14),
	.matrix_8_15(matrix_8_15),
	.matrix_8_16(matrix_8_16),
	.matrix_9_0(matrix_9_0),
	.matrix_9_1(matrix_9_1),
	.matrix_9_2(matrix_9_2),
	.matrix_9_3(matrix_9_3),
	.matrix_9_4(matrix_9_4),
	.matrix_9_5(matrix_9_5),
	.matrix_9_6(matrix_9_6),
	.matrix_9_7(matrix_9_7),
	.matrix_9_8(matrix_9_8),
	.matrix_9_9(matrix_9_9),
	.matrix_9_10(matrix_9_10),
	.matrix_9_11(matrix_9_11),
	.matrix_9_12(matrix_9_12),
	.matrix_9_13(matrix_9_13),
	.matrix_9_14(matrix_9_14),
	.matrix_9_15(matrix_9_15),
	.matrix_9_16(matrix_9_16),
	.matrix_10_0(matrix_10_0),
	.matrix_10_1(matrix_10_1),
	.matrix_10_2(matrix_10_2),
	.matrix_10_3(matrix_10_3),
	.matrix_10_4(matrix_10_4),
	.matrix_10_5(matrix_10_5),
	.matrix_10_6(matrix_10_6),
	.matrix_10_7(matrix_10_7),
	.matrix_10_8(matrix_10_8),
	.matrix_10_9(matrix_10_9),
	.matrix_10_10(matrix_10_10),
	.matrix_10_11(matrix_10_11),
	.matrix_10_12(matrix_10_12),
	.matrix_10_13(matrix_10_13),
	.matrix_10_14(matrix_10_14),
	.matrix_10_15(matrix_10_15),
	.matrix_10_16(matrix_10_16),
	.matrix_11_0(matrix_11_0),
	.matrix_11_1(matrix_11_1),
	.matrix_11_2(matrix_11_2),
	.matrix_11_3(matrix_11_3),
	.matrix_11_4(matrix_11_4),
	.matrix_11_5(matrix_11_5),
	.matrix_11_6(matrix_11_6),
	.matrix_11_7(matrix_11_7),
	.matrix_11_8(matrix_11_8),
	.matrix_11_9(matrix_11_9),
	.matrix_11_10(matrix_11_10),
	.matrix_11_11(matrix_11_11),
	.matrix_11_12(matrix_11_12),
	.matrix_11_13(matrix_11_13),
	.matrix_11_14(matrix_11_14),
	.matrix_11_15(matrix_11_15),
	.matrix_11_16(matrix_11_16),
	.matrix_12_0(matrix_12_0),
	.matrix_12_1(matrix_12_1),
	.matrix_12_2(matrix_12_2),
	.matrix_12_3(matrix_12_3),
	.matrix_12_4(matrix_12_4),
	.matrix_12_5(matrix_12_5),
	.matrix_12_6(matrix_12_6),
	.matrix_12_7(matrix_12_7),
	.matrix_12_8(matrix_12_8),
	.matrix_12_9(matrix_12_9),
	.matrix_12_10(matrix_12_10),
	.matrix_12_11(matrix_12_11),
	.matrix_12_12(matrix_12_12),
	.matrix_12_13(matrix_12_13),
	.matrix_12_14(matrix_12_14),
	.matrix_12_15(matrix_12_15),
	.matrix_12_16(matrix_12_16),
	.matrix_13_0(matrix_13_0),
	.matrix_13_1(matrix_13_1),
	.matrix_13_2(matrix_13_2),
	.matrix_13_3(matrix_13_3),
	.matrix_13_4(matrix_13_4),
	.matrix_13_5(matrix_13_5),
	.matrix_13_6(matrix_13_6),
	.matrix_13_7(matrix_13_7),
	.matrix_13_8(matrix_13_8),
	.matrix_13_9(matrix_13_9),
	.matrix_13_10(matrix_13_10),
	.matrix_13_11(matrix_13_11),
	.matrix_13_12(matrix_13_12),
	.matrix_13_13(matrix_13_13),
	.matrix_13_14(matrix_13_14),
	.matrix_13_15(matrix_13_15),
	.matrix_13_16(matrix_13_16),
	.offsetX(offsetX),
	.offsetY(offsetY),
	.pixelX(pixelX),
	.pixelY(pixelY),
	.randomMap(randomMap),
	.resetN(resetN),
	.topLeftX(topLeftX),
	.topLeftY(topLeftY)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1250 1'b1;
	#1250;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #20000 1'b1;
end 
// pixelX[ 10 ]
initial
begin
	pixelX[10] = 1'b0;
end 
// pixelX[ 9 ]
initial
begin
	pixelX[9] = 1'b0;
end 
// pixelX[ 8 ]
initial
begin
	pixelX[8] = 1'b0;
end 
// pixelX[ 7 ]
initial
begin
	pixelX[7] = 1'b0;
end 
// pixelX[ 6 ]
initial
begin
	pixelX[6] = 1'b0;
end 
// pixelX[ 5 ]
initial
begin
	repeat(6)
	begin
		pixelX[5] = 1'b0;
		pixelX[5] = #80000 1'b1;
		# 80000;
	end
	pixelX[5] = 1'b0;
end 
// pixelX[ 4 ]
initial
begin
	repeat(12)
	begin
		pixelX[4] = 1'b0;
		pixelX[4] = #40000 1'b1;
		# 40000;
	end
	pixelX[4] = 1'b0;
end 
// pixelX[ 3 ]
always
begin
	pixelX[3] = 1'b0;
	pixelX[3] = #20000 1'b1;
	#20000;
end 
// pixelX[ 2 ]
always
begin
	pixelX[2] = 1'b0;
	pixelX[2] = #10000 1'b1;
	#10000;
end 
// pixelX[ 1 ]
always
begin
	pixelX[1] = 1'b0;
	pixelX[1] = #5000 1'b1;
	#5000;
end 
// pixelX[ 0 ]
always
begin
	pixelX[0] = 1'b0;
	pixelX[0] = #2500 1'b1;
	#2500;
end 
// pixelY[ 10 ]
initial
begin
	pixelY[10] = 1'b0;
end 
// pixelY[ 9 ]
initial
begin
	pixelY[9] = 1'b0;
end 
// pixelY[ 8 ]
initial
begin
	pixelY[8] = 1'b0;
end 
// pixelY[ 7 ]
initial
begin
	pixelY[7] = 1'b0;
end 
// pixelY[ 6 ]
initial
begin
	pixelY[6] = 1'b0;
end 
// pixelY[ 5 ]
initial
begin
	pixelY[5] = 1'b0;
end 
// pixelY[ 4 ]
initial
begin
	pixelY[4] = 1'b0;
end 
// pixelY[ 3 ]
initial
begin
	pixelY[3] = 1'b0;
end 
// pixelY[ 2 ]
initial
begin
	pixelY[2] = 1'b0;
end 
// pixelY[ 1 ]
initial
begin
	pixelY[1] = 1'b0;
	pixelY[1] = #320000 1'b1;
	pixelY[1] = #320000 1'b0;
	pixelY[1] = #320000 1'b1;
end 
// pixelY[ 0 ]
initial
begin
	repeat(3)
	begin
		pixelY[0] = 1'b0;
		pixelY[0] = #160000 1'b1;
		# 160000;
	end
	pixelY[0] = 1'b0;
end 
// topLeftX[ 10 ]
initial
begin
	topLeftX[10] = 1'b0;
end 
// topLeftX[ 9 ]
initial
begin
	topLeftX[9] = 1'b0;
end 
// topLeftX[ 8 ]
initial
begin
	topLeftX[8] = 1'b0;
end 
// topLeftX[ 7 ]
initial
begin
	topLeftX[7] = 1'b0;
end 
// topLeftX[ 6 ]
initial
begin
	topLeftX[6] = 1'b0;
end 
// topLeftX[ 5 ]
initial
begin
	topLeftX[5] = 1'b0;
end 
// topLeftX[ 4 ]
initial
begin
	topLeftX[4] = 1'b0;
end 
// topLeftX[ 3 ]
initial
begin
	topLeftX[3] = 1'b0;
end 
// topLeftX[ 2 ]
initial
begin
	topLeftX[2] = 1'b0;
end 
// topLeftX[ 1 ]
initial
begin
	topLeftX[1] = 1'b0;
end 
// topLeftX[ 0 ]
initial
begin
	topLeftX[0] = 1'b0;
end 
// topLeftY[ 10 ]
initial
begin
	topLeftY[10] = 1'b0;
end 
// topLeftY[ 9 ]
initial
begin
	topLeftY[9] = 1'b0;
end 
// topLeftY[ 8 ]
initial
begin
	topLeftY[8] = 1'b0;
end 
// topLeftY[ 7 ]
initial
begin
	topLeftY[7] = 1'b0;
end 
// topLeftY[ 6 ]
initial
begin
	topLeftY[6] = 1'b0;
end 
// topLeftY[ 5 ]
initial
begin
	topLeftY[5] = 1'b0;
end 
// topLeftY[ 4 ]
initial
begin
	topLeftY[4] = 1'b0;
end 
// topLeftY[ 3 ]
initial
begin
	topLeftY[3] = 1'b0;
end 
// topLeftY[ 2 ]
initial
begin
	topLeftY[2] = 1'b0;
end 
// topLeftY[ 1 ]
initial
begin
	topLeftY[1] = 1'b0;
end 
// topLeftY[ 0 ]
initial
begin
	topLeftY[0] = 1'b0;
end 
// mapNum[ 1 ]
initial
begin
	mapNum[1] = 1'b0;
end 
// mapNum[ 0 ]
initial
begin
	mapNum[0] = 1'b0;
end 

// changeMap
initial
begin
	changeMap = 1'b0;
	changeMap = #620000 1'b1;
	changeMap = #10000 1'b0;
end 

// randomMap
initial
begin
	randomMap = 1'b1;
	randomMap = #30000 1'b0;
end 

// collision
initial
begin
	collision = 1'b0;
	collision = #120000 1'b1;
	collision = #10000 1'b0;
	collision = #340000 1'b1;
	collision = #10000 1'b0;
end 
// brickCollision1X[ 4 ]
initial
begin
	brickCollision1X[4] = 1'b0;
end 
// brickCollision1X[ 3 ]
initial
begin
	brickCollision1X[3] = 1'b0;
end 
// brickCollision1X[ 2 ]
initial
begin
	brickCollision1X[2] = 1'b0;
end 
// brickCollision1X[ 1 ]
initial
begin
	brickCollision1X[1] = 1'b0;
end 
// brickCollision1X[ 0 ]
initial
begin
	brickCollision1X[0] = 1'b1;
end 
// brickCollision1Y[ 3 ]
initial
begin
	brickCollision1Y[3] = 1'b0;
end 
// brickCollision1Y[ 2 ]
initial
begin
	brickCollision1Y[2] = 1'b0;
end 
// brickCollision1Y[ 1 ]
initial
begin
	brickCollision1Y[1] = 1'b0;
end 
// brickCollision1Y[ 0 ]
initial
begin
	brickCollision1Y[0] = 1'b0;
end 
endmodule

